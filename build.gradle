import java.text.SimpleDateFormat

String activeProfile = System.properties['spring.profiles.active'] ?: 'development,local,demodata'

println "active profile = ${activeProfile}"

buildscript {
	repositories {
		mavenCentral()
		maven {
			url 'https://repo1.maven.org/maven2/'
		}
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineVersion}"
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.43.0'
		classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.2'
		classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.16.10'
		classpath 'com.browserstack:browserstack-local-java:1.0.6'
	}
}


apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.github.ben-manes.versions"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin: 'war'
apply plugin: 'pmd'
apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'docker-compose'
apply plugin: 'jacoco'

group = 'ch.itds.pbs'
version = project.version

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(17))
	}
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
	runtime.exclude group: 'log4j', module: 'log4j'
	assets.exclude group: 'log4j', module: 'log4j'
}

repositories {
	mavenCentral()
	maven {
		url 'https://repo1.maven.org/maven2/'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	compileOnly 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'


	implementation 'com.vladmihalcea:hibernate-types-52:2.20.0'
	implementation 'org.postgresql:postgresql'
	implementation 'org.liquibase:liquibase-core'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time'
	implementation 'ch.itds.taglib:asset-pipeline-thymeleaf-taglib:1.1.1'

	runtimeOnly "com.bertramlabs.plugins:asset-pipeline-spring-boot:${assetPipelineVersion}"
	assets "com.bertramlabs.plugins:sass-dart-asset-pipeline:${assetPipelineVersion}"
	implementation "com.bertramlabs.plugins:sass-dart-asset-pipeline:${assetPipelineVersion}"

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.github.tomakehurst:wiremock:2.27.2'

	testImplementation 'org.assertj:assertj-core'
	testImplementation 'org.seleniumhq.selenium:selenium-java:4.6.0'
	testImplementation 'org.seleniumhq.selenium:selenium-firefox-driver:4.6.0'
	testImplementation 'org.seleniumhq.selenium:selenium-remote-driver:4.6.0'
	testImplementation 'org.seleniumhq.selenium:selenium-api:4.6.0'
	testImplementation 'io.github.bonigarcia:selenium-jupiter:4.3.2'

	implementation 'org.slf4j:log4j-over-slf4j:2.0.3' // required for asset pipeline

	// Logging to Logstash
	implementation "net.logstash.logback:logstash-logback-encoder:7.2"
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.0'
	// required for logback (does not start otherwise)

	// web frontend libraries
	implementation 'org.webjars:font-awesome:5.15.2'
	implementation 'org.webjars.npm:tablesort:5.2.0'

	// rest api doc
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
	implementation 'org.springdoc:springdoc-openapi-security:1.6.12'

}

sourceSets {
	main {
		resources {
			srcDir 'src/assets'
		}
	}
}

bootRun {
	systemProperty 'spring.profiles.active', activeProfile
}

bootJar {
	enabled = true
	archiveName = "${baseName.toLowerCase().replace(' ', '-')}-${activeProfile}.jar"
	launchScript()
}

springBoot {
	buildInfo()
}

assemble.dependsOn bootJar

assets {
	minifyJs = true
	minifyCss = true
	enableSourceMaps = true
	maxThreads = 4 //useful for concurrent asset processing during build
	configOptions = [commonJs: false] //useful for custom config on extension libraries

	minifyOptions = [
			optimizationLevel: 'SIMPLE',
			targetLanguage   : 'ES6',
	]

	includes = [
			'extensions/*',
			'webjars/font-awesome/5.15.2/webfonts/**',
	]
	excludes = ['**/*.less', '**/*.scss', 'webjars/**', '**/*.es6', 'inc/**'] //Example Exclude GLOB pattern

	//developmentRuntime can be turned off
	developmentRuntime = true

	//if you want to customize the jar task this task runs on you can specify a jarTaskName
	jarTaskName = "bootJar"
}

System.setProperty("polyglot.engine.WarnInterpreterOnly", "false")
System.setProperty("polyglot.log.file", "${buildDir}/polyglot.log")

task generateItdsFooter {
	doLast {
		println '** Generate Qube AG Footer **'

		def applicationProps = new Properties()
		file("src/main/resources/application.properties")
				.withInputStream { applicationProps.load(it) }

		Date now = new Date()
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm")
		SimpleDateFormat sdfYear = new SimpleDateFormat("yyyy")

		Map<String, String> m = [
				"appName"       : applicationProps.getProperty('spring.application.name'),
				"version"       : project.version,
				"buildTimestamp": sdf.format(now),
				"buildYear"     : sdfYear.format(now),
				"branch"        : System.getenv("CI_BUILD_REF_NAME") ?: "unknown",
				"commit"        : System.getenv("CI_BUILD_REF") ?: "unknown",
				"buildNumber"   : System.getenv("CI_BUILD_ID") ?: "unknown",
				"buildHostId"   : System.getenv("CI_RUNNER_ID") ?: "unknown",
				"buildHostName" : System.getenv("CI_RUNNER_DESCRIPTION") ?: "unknown",
				"pipelineNumber": System.getenv("CI_PIPELINE_ID") ?: "unknown"
		]
		String versionInfo = "<span class=\"versioninfo\" title=\"&copy; ${m.buildYear} Qube AG - ${m.appName} ${m.version} - Build: ${m.pipelineNumber}/${m.buildNumber} (${m.branch}) ${m.buildTimestamp}\">${m.appName} ${m.version}</span>"


		File footer = project.file("src/main/resources/templates/fragments/version.html")
		if (!footer.exists())
			footer.createNewFile()
		footer.text = versionInfo

	}
}

processResources.dependsOn generateItdsFooter

dependencyUpdates {
	resolutionStrategy {
		componentSelection { rules ->
			rules.all { ComponentSelection selection ->
				boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea', 'pr'].any { qualifier ->
					selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
				}

				//geb rc versions
				if (selection.candidate.version ==~ /\d+.\d+-RC(\d+)-groovy-\d+.\d+/ ) rejected = true

				if (rejected) {
					selection.reject('Release candidate')
				}
			}
		}
	}
	checkForGradleUpdate = false
	outputFormatter = "text,xml"
}

pmd {
	toolVersion = '6.14.0'
	//ignoreFailures = true
	pmdTest.enabled = false
	ruleSetFiles = files("config/pmd/ruleset.xml")
	ruleSets = []
}

tasks.withType(Pmd) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

dockerCompose {
	// reconnect instead of recreate: https://github.com/avast/gradle-docker-compose-plugin#reconnecting
	stopContainers = false
	projectName = null
}

/* extract database port for 3rd party usage
   * .idea/dataSources.xml for IntelliJ database module
   * build/resources/main/application-development.properties for application built & executed without gradle
 */
task writeDbPort {
	doLast {
		def dbInfo = dockerCompose.servicesInfos.postgres.firstContainer
		File file = new File("build/databaseport")
		file.write Integer.toString(dbInfo.ports[5432])
		file = new File(".idea/dataSources.xml")
		if (file.exists()) {
			String dbName = dbInfo.properties.inspection.Config.Env.grep { it.startsWith('POSTGRES_DB=') }[0].split('=')[1]
			file.write file.text.replaceAll("jdbc:postgresql:\\/\\/localhost:(\\d+)\\/${dbName}", "jdbc:postgresql://localhost:${dbInfo.ports[5432]}/${dbName}")
		}
		file = new File("build/resources/main/application-development.properties")
		if (file.exists()) {
			file.write file.text.replaceAll('TCP_5432:5432', "TCP_5432:${dbInfo.ports[5432]}")
		}
	}
}

dockerCompose.isRequiredBy(bootRun)
composeUp.finalizedBy(writeDbPort)

if (!System.getenv("CI_SERVER")) {
	dockerCompose.isRequiredBy(test)
}

test {
	useJUnitPlatform()
	systemProperty 'spring.profiles.active', activeProfile + ',test,demodata'

	// via https://groups.google.com/g/geb-user/c/ps9rErAmX9k/m/tekG5l1jCwAJ
	// disabled due to load issues: slower in GitLab-CI than with 1 fork
	maxParallelForks = Runtime.runtime.availableProcessors() - 2
	//maxParallelForks = 1 // to avoid hanging test;  https://discuss.gradle.org/t/gradle-test-hangs-forever/9251/8
	forkEvery = 50
	systemProperty 'runner.parallel.enabled', 'true'

	testLogging {
		exceptionFormat = 'full'
		//showStandardStreams = true
	}

	jacoco {
		excludes = ["com/gargoylesoftware/**"]
	}
}

task browserOpenJacocoReport {
	group = JavaBasePlugin.VERIFICATION_GROUP
	doLast {
		java.awt.Desktop.desktop.browse "file://${projectDir}/build/reports/jacoco/test/html/index.html".toURI()
	}
}
